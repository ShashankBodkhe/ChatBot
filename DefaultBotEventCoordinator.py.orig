#!/usr/bin/python

import Message
import JidHandle

class DefaultBotEventCoordinator():
    
    __RecipientChooser = None
    
    __MessageBuilder = None

    __ItBot = None
        
    def __init__(self, RecipientChooser, MessageBuilder, ItBot):
        self.__RecipientChooser = RecipientChooser
        self.__MessageBuilder = MessageBuilder
        self.__ItBot = ItBot
    
    @staticmethod
    def factory(MyConfig, ItBot):
        return DefaultBotEventCoordinator(
            MyConfig.getRecipientChooser(),
            MyConfig.getMessageBuilder(),
            ItBot
        )
    
    def handleStatusCheck(self):
        pass
    
    def handleMessageReceived(self, sender, receivedMessageBody):
        RecipientJidHandles = self.__RecipientChooser.getRecipientJidHandles()
        
        self.__sendConfirmationMessage(sender)
        
        if (RecipientJidHandles):
            self.__sendRelayMessage(receivedMessageBody, RecipientJidHandles)
        else:
            self.__sendNobodyAvailableMessage(sender)
    
    ##
    ## Private Methods
    ##
    
    def __sendRelayMessage(self, receivedMessageBody, RecipientJidHandles):
        messageBody = self.__MessageBuilder.getRelayMessageBody(receivedMessageBody)
        RelayMessage = Message.Message(RecipientJidHandles, messageBody)

        self.__ItBot.sendMessage(RelayMessage)
    
    def __sendNobodyAvailableMessage(self, sender):
        messageBody = self.__MessageBuilder.getNobodyAvailableMessageBody()
        NobodyAvailableMessage = Message.Message([JidHandle.JidHandle('', sender)], messageBody)
        
        self.__ItBot.sendMessage(NobodyAvailableMessage)
                
    def __sendConfirmationMessage(self, sender):
        confirmationMessageBody = self.__MessageBuilder.getSenderConfirmationMessageBody()
        ConfirmationMessage = Message.Message([JidHandle.JidHandle('', sender)], confirmationMessageBody)
        
        self.__ItBot.sendMessage(ConfirmationMessage)